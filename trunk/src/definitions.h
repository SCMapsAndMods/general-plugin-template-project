#pragma once

//What is the plugin's ID?
//Plugin ID generated by MakeID.HTA (based on CRC32)
#define PLUGIN_ID 0x1B4D69B6

//What is the plugin's name (and version)?
#define PLUGIN_NAME "General Plugin Template Project v2.31"

//What version of StarCraft is this for?
//Valid format: 1.16.1 -> 1161, 1.15.1 -> 1151, 1.08 -> 1080, etc.
#define SC_VERSION 1161
	/*
	 *  Supported Versions:
	 *  v1151
	 *  v1161
	 */

//Are we in debug mode?
//#define DEBUG
//#define RELEASE


#ifdef RELEASE
	#ifdef DEBUG
		#undef DEBUG
	#endif
#endif

/*
 *  Pass a string through WARNING(x) with DEBUG defined to create
 *  an error message in test.txt.  Remember that the arguement in
 *  WARNING(x) must either be a declared variable or a string with
 *  surrounding quotes.  Use the FATALERROR macro only when something
 *  could be "fatally" incorrect in the code -- a file could not
 *  be read, an address could not be written to, ect.
 *
 *  Example use:  WARNING("Failed to hook onto text printing function!");
 *			      FATALERROR("Failed to open file ", filename);
 *				  FATALERROR("asdf", "qwert");
 */
#ifndef DEBUG
	#define WARNING(x)
	#define FATALERROR(x,y)
	#define ASSERT(x)
#else
	#define WARNING(x)												\
		myfile << "Warning: " << x << "\n";							\
		myfile << "\t" << __TIME__ << ", " << __DATE__ << "\n";		\
		myfile << "\t" << __FILE__ << ", " << __LINE__ << "\n";
	#define FATALERROR(x,y)											\
		myfile << "Fatal Error: " << x << " " << y << "\n";			\
		myfile << "\t" << __TIME__ << ", " << __DATE__ << "\n";		\
		myfile << "\t" << __FILE__ << ", " << __LINE__ << "\n";
	#define ASSERT(x)												\
		if (! (x))													\
		{															\
			myfile << "Error!  Assert " << x << " failed\n";		\
			myfile << "\t" << __TIME__ << ", " << __DATE__ << "\n";	\
			myfile << "\t" << __FILE__ << ", " << __LINE__ << "\n";	\
		}
#endif
