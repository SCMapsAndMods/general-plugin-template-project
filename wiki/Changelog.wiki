#summary Changelog of GPTP

= v2.34 =

 * Dropped official support for Code::Blocks. You can still import GPTP into a new project, though.
 * The hook system has been overhauled from the header-source format to the header-source-injector format.
 * MPQDraftPlugin overhaul:
  * `qdp.cpp` has been replaced with `Plugin.h`, `Plugin.cpp` and `plugin_main.cpp`. This should be unnoticeable for most modders.
  * `qdp.def` has been renamed to `plugin.def`. This should be reflected in the tutorials.
  * `initialize.h` and `configure.h` have been renamed to `initialize.cpp` and `configure.cpp`, respectively.
 * `offsets.h` has been removed and all hardcoded offsets moved to function definitions. This should make writing hooks easier.
 * Graphics changes (`graphics/graphics.h`)
  * Drawing functions have been merged into one function per shape (ex: `drawDotOnMap() / drawDotOnScreen() => drawDot()`).
  * Drawing functions now take an extra parameter of `graphics::CoordType` type. Allowed values are `graphics::ON_SCREEN` (default), `graphics::ON_MAP`, and `graphics::ON_MOUSE`.
 * `SCBW/unit_finder.h` and `SCBW/unit_finder.cpp` have been replaced by the UnitFinder class. See documentation for more info.
 * The following functions have been replaced with:
  * `scbw::createOverlay() => CSprite::createOverlay(), CSprite::createTopOverlay()`
  * `scbw::removeOverlay() => CUnit::removeOverlay(), CSprite::removeOverlay()`
  * `scbw::doWeaponDamage() => CUnit::damageWith()`
 * New functions: `scbw::showErrorMessageWithSfx(), scbw::refreshButtonSet(), CUnit::getMaxWeaponRange(), CUnit::getMaxEnergy(), CUnit::getArmor(), CUnit::getArmorBonus(), CUnit::getSightRange()`
 * New hooks
  * `hooks/harvest.cpp`: Change how much resources are harvested/returned per each worker trip.
 * Bug fixes
  * Psi field sprites become automatically invisible when a selected psi field provider stops providing power.
  * Shapes drawn on the map no longer "lag" when the viewport is scrolled across the map.
 * To avoid confusion, `hooks::updatePsiFieldProvider()` no longer requires a `CUnit*` parameter, and should be called _once_ per frame. It has also been renamed to `hooks::updatePsiFieldProviders()`.

= v2.33 =

 * GPTP now supports drawing dots, lines, boxes, and text directly on the screen and the map. See graphics\graphics.h for details.
 * New hooks:
  * Psi field - make (most) units generate psi fields
  * Arbiter cloaking - configure which units are (not) cloaked by Arbiters
 * Unit finder functions have been moved to a separate file (unit_finder.h).
 * Unit finder functions now use a separate structure (`UnitFinderResult`) to store search results.
 * Some API functions have been moved to structure members.
 * Several structure members have been renamed/modified.
 * The `memoryPatchX()` functions in tools.h have been merged into a template function.
 * Bug fixes:
  * Fixed a critical bug in Unit::getDistanceToTarget().
  * Fixed small bugs in unit finder functions.

= v2.32 =

 * GPTP now supports Visual C++ out of the box (again). Tested with VC++ Express 2005 and the Platform SDK.
 * Added new hook for controlling which units can fire from inside bunkers.
 * New API functions: `scbw::isAlliedTo(), scbw::isGamePaused()`
 * GPTP now supports !StarCraft: Brood War v1.16.1 only.
 * Bug fixes:
  * Fixed a bug that caused Ensnared units to attack faster.

= v2.31 =

 * Fixed a critical bug with doWeaponDamageHook().

= v2.3 =

 * Hooks have been modified:
  * Function definitions of hooks now reside in the hooks\ directory.
To modify any hooks, edit the `*.CPP` files.
  * Plague damage hooks have been replaced by the more powerful `updateUnitStatus()` hook.
 * Fixed missing hooks for setting rally points
 * Changed how the VERSION macro works--see definitions.h for details.
 * Large enumerations are now spread between multiple header files. Don't worry; you can still include enumerations.h to use all of them.
 * Added new enumeration: `ImageId` (`SCBW\enumerations\ImageId.h`)
 * `UNIT::healthPoints` has been renamed to `UNIT::hitPoints`.
 * Other numerous changes that should make modding easier

= v2.23 =
 * Turns out `UNIT::healthPoints` is a signed 32-bit integer. Fixed.
 * Fixed typos:
  * UNIT struct: `statisTime` -> `stasisTime`
  * !UnitStatus enum: `GoundedBuilding` -> `GroundedBuilding`
 * The `UNIT::unitId` member has been renamed to UNIT::id`.
 * Added new API functions: `hasPathToPos(), hasPathToTarget(), isTargetWithinRange(), getDistanceFast(), removeUnit()`
 * Added new hooks:
  * Control what actually happens when you set a rally point
  * Control upgrade effects for weapon range and sight range
  * Control which units can detect.

= v2.221 =
 * Hotfixed a problem that caused rally hook to crash.

= v2.22 =
 * !JmpCallPatch() has been replaced by jmpPatch() and callPatch(), reflecting the latest set of functions used in BWAPI. See tools.h for a thorough documentation.
 * Many existing hooks have been rewritten to use jmpPatch() and callPatch(). This reduces quite a few lines of unnecessary code.
 * Fixed (well, deleted) a potential bug in stimPacksHpCostToEax2().
 * Fixed a potential bug in energyRegenAmountHook() that could make a unit's energy overflow in some weird cases.
 * Added a new pointer constant, CONSUME_ENERGY_GAIN. You can use this pointer to access the energy gain amount set in FireGraft. consumeEnergyGainHook() has been modified to not destroy this value.

= v2.21 =

 * Many enumerations were renamed. I promise I won't rename them again.
 * Added some new API functions and one hook function for controlling unit rally orders.
 * You can now loop through units and bullets using linked lists (using tables is still supported).
 * Some namespaces were renamed.
 * The UNIT structure has been slightly modified.
 * memoryPatch() has been split to memoryPatch1(), memoryPatch2(), and memoryPatch4() to avoid ambiguities.
 * sightLimitExtender should work properly now.

= v2.2 =

 * Massively reorganized header and source files.
 * Added many missing DAT offsets, copied from BWAPI's Offsets.h
 * Added some SCBW's internal structures, also copied from BWAPI
 * Added many enumerations, also copied from BWAPI
 * Added several hook functions discovered by pastelmind (special thanks to Heinermann)
 * You can now generate custom plugin IDs with MakeID.hta. It supports random IDs as well as checksum-based IDs. Just double-click the MakeID.hta file to run the app.